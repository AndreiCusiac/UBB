     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf   ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  
    10                                  import scanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  
    13                                      ; exit is a function that ends the calling process. It is defined in msvcrt.dll 
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19                                      
    20 00000000 616162636300                s1 db 'aabcc', 0
    21                                      ls1 equ $-s1-2
    22                                      parc1 equ $-s1-1
    23                                      
    24 00000006 61616162636300              s2 db 'aaabcc', 0
    25                                      ls2 equ $-s2-2
    26                                      parc2 equ $-s2-1
    27                                          
    28 0000000D 63646400                    s3 db 'cdd', 0
    29                                      ls3 equ $-s3-2
    30                                      parc3 equ $-s3-1
    31                                      
    32 00000011 00000000                    ls dd 0
    33                                      
    34 00000015 256400                      fdec db '%d', 0
    35 00000018 256300                      fcar db '%c', 0
    36                                      
    37 0000001B 00000000                    a dd 0
    38 0000001F 00000000                    b dd 0
    39 00000023 00000000                    k dd 0
    40                                      
    41 00000027 63722025632000              mesaj db 'cr %c ', 0
    42                                      
    43 0000002E 74727900                    msj db 'try', 0
    44                                      
    45 00000032 636F6E746F72206573-         beste db 'contor este %d', 0
    45 0000003B 746520256400       
    46                                      
    47 00000041 4E7520732D61206761-         mesajNePareRau db 'Nu s-a gasit un sufix comun', 0
    47 0000004A 73697420756E207375-
    47 00000053 66697820636F6D756E-
    47 0000005C 00                 
    48                                      
    49 0000005D 0A00                        linie_noua db 10, 0
    50                                      
    51                                  ; our code starts here
    52                                  segment code use32 class=code
    53                                      start:
    54                                          
    55                                          ; Se dau (direct in segmentul de date) trei siruri de caractere. Sa se afiseze cel mai lung sufix comun 
    56                                          ; pentru fiecare din cele trei perechi de cate doua siruri ce se pot forma.
    57                                          
    58 00000000 C705[1F000000]0000-             mov [b], dword 0
    58 00000008 0000               
    59 0000000A BE[00000000]                    mov esi, s1
    60 0000000F BF[06000000]                    mov edi, s2
    61 00000014 83C604                          add esi, ls1
    62 00000017 83C705                          add edi, ls2
    63                                          
    64 0000001A B005                            mov al, parc1
    65 0000001C B306                            mov bl, parc2
    66                                          
    67 0000001E 38D8                            cmp al, bl
    68 00000020 7F02                            jg Primul
    69 00000022 7E0C                            jng Doilea
    70                                          
    71                                          Primul:
    72 00000024 C705[11000000]0600-                 mov [ls], dword parc2
    72 0000002C 0000               
    73 0000002E EB0A                                jmp MaiDeparte
    74                                          
    75                                          Doilea:
    76 00000030 C705[11000000]0500-                 mov [ls], dword parc1
    76 00000038 0000               
    77                                          
    78                                          MaiDeparte:
    79 0000003A 8B0D[11000000]                      mov ecx, [ls]
    80                                           
    81 00000040 FD                              std
    82                                          
    83                                          Repeta:
    84 00000041 890D[23000000]                      mov [k], ecx
    85                                              
    86 00000047 A6                                  cmpsb
    87                                              
    88 00000048 7402                                je Crestem
    89 0000004A 7508                                jne Iesim
    90                                              
    91                                              Crestem:
    92 0000004C FF05[1F000000]                          inc dword [b]
    93 00000052 EB0D                                    jmp Continuam
    94                                                  
    95                                              Iesim:
    96 00000054 8B1D[1F000000]                          mov ebx, [b]
    97 0000005A 83FB00                                  cmp ebx, 0
    98 0000005D 7444                                    je NePareRau
    99 0000005F 7508                                    jne Afisam
   100                                              
   101                                              Continuam:
   102                                              
   103 00000061 8B0D[23000000]                      mov ecx, [k]
   104                                          
   105 00000067 E2D8                            loop Repeta
   106                                          
   107                                          Afisam:
   108                                              
   109 00000069 FC                                  cld
   110                                              
   111 0000006A BE[00000000]                        mov esi, s1
   112 0000006F 83C605                              add esi, parc1
   113 00000072 2B35[1F000000]                      sub esi, [b]
   114                                              
   115 00000078 8B0D[1F000000]                      mov ecx, [b]
   116                                              
   117                                              Tiparim:
   118 0000007E 890D[23000000]                          mov [k], ecx
   119                                              
   120 00000084 B800000000                              mov eax, 0
   121 00000089 AC                                      lodsb
   122                                                  
   123 0000008A 50                                      push dword eax
   124 0000008B 68[18000000]                            push dword fcar
   125 00000090 FF15[00000000]                          call [printf]
   126 00000096 83C408                                  add esp, 4*2
   127                                                      
   128 00000099 8B0D[23000000]                          mov ecx, [k]
   129                                              
   130 0000009F E2DD                                loop Tiparim
   131 000000A1 EB10                                jmp Final
   132                                              
   133                                          NePareRau:
   134 000000A3 68[41000000]                        push dword mesajNePareRau
   135 000000A8 FF15[00000000]                      call [printf]
   136 000000AE 83C404                              add esp, 4
   137                                              
   138 000000B1 EB00                                jmp Final
   139                                          
   140                                          Final:
   141                                          
   142                                          ;push dword linie_noua
   143                                          ;call [printf]
   144                                          ;add esp, 4
   145                                          
   146                                          ; exit(0)
   147 000000B3 6A00                            push dword 0      ; push the parameter for exit onto the stack
   148 000000B5 FF15[00000000]                  call [exit]       ; call exit to terminate the program
