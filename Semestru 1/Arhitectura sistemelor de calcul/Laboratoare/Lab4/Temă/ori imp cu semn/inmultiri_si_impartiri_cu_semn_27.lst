     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 66                          a db 102
    16 00000001 03                          b db 3
    17 00000002 0400                        c dw 4
    18 00000004 05000000                    e dd 5
    19 00000008 CC00000000000000            x dq 204
    20 00000010 0000                        auxx dw 0
    21 00000012 00000000                    auxx1 dd 0
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; (100+a+b*c)/(a-100)+e+x/a
    27                                          
    28 00000000 A0[01000000]                    mov al, [b]
    29 00000005 6698                            cbw 
    30 00000007 66F72D[02000000]                imul word[c] ; dx:ax = b*c
    31                                          
    32 0000000E 6689C3                          mov bx, ax
    33 00000011 6689D1                          mov cx, dx ; cx:bx = b*c
    34                                          
    35 00000014 A0[00000000]                    mov al, [a]
    36 00000019 0464                            add al, 100
    37 0000001B 6698                            cbw
    38 0000001D 6699                            cwd ; dx:ax = a+100
    39                                          
    40 0000001F 6601C3                          add bx, ax
    41 00000022 6611D1                          adc cx, dx ; cx:bx = 100+a+b*c
    42                                          
    43 00000025 A0[00000000]                    mov al, [a]
    44 0000002A 2C64                            sub al, 100
    45                                          
    46 0000002C 6698                            cbw ; al -> ax
    47                                          
    48 0000002E 66A3[10000000]                  mov [auxx], ax ; auxx = a-100
    49                                          
    50 00000034 6689D8                          mov ax, bx
    51 00000037 6689CA                          mov dx, cx ; dx:ax = 100+a+b*c
    52                                          
    53 0000003A 66F73D[10000000]                idiv word[auxx] ; ax = catul (100+a+b*c)/(a-100)
    54                                          
    55 00000041 6699                            cwd ; dx:ax = (100+a+b*c)/(a-100)
    56                                          
    57 00000043 660305[04000000]                add ax, word[e+0]
    58 0000004A 661315[06000000]                adc dx, word[e+2] ; dx:ax = (100+a+b*c)/(a-100)+e
    59                                          
    60 00000051 6689C3                          mov bx, ax
    61 00000054 6689D1                          mov cx, dx ; cx:bx = (100+a+b*c)/(a-100)+e
    62                                          
    63 00000057 A0[00000000]                    mov al, [a]
    64 0000005C 6698                            cbw
    65 0000005E 98                              cwde
    66 0000005F A3[12000000]                    mov [auxx1], eax ; auxx1 = a
    67                                          
    68 00000064 A1[08000000]                    mov eax, dword[x+0]
    69 00000069 8B15[0C000000]                  mov edx, dword[x+4]
    70                                          
    71 0000006F F73D[12000000]                  idiv dword[auxx1] ; eax = catul (x/a)
    72                                          
    73 00000075 6651                            push cx
    74 00000077 6653                            push bx
    75 00000079 5B                              pop ebx ; ebx = (100+a+b*c)/(a-100)+e
    76                                          
    77 0000007A 01D8                            add eax, ebx
    78                                  
    79                                          ; exit(0)
    80 0000007C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    81 0000007E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
