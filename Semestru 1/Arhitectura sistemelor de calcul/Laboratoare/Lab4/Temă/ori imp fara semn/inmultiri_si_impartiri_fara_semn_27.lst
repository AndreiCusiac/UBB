     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 66                          a db 102
    16 00000001 03                          b db 3
    17 00000002 0400                        c dw 4
    18 00000004 05000000                    e dd 5
    19 00000008 CC00000000000000            x dq 204
    20 00000010 0000                        auxx dw 0
    21                                      
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; (100+a+b*c)/(a-100)+e+x/a
    26                                          
    27 00000000 66A1[02000000]                  mov  ax, [c]
    28 00000006 8A1D[01000000]                  mov bl, [b]
    29 0000000C B700                            mov bh, 0
    30                                          
    31 0000000E 66F7E3                          mul bx ; dx:ax = b*c
    32                                          
    33 00000011 6689C3                          mov bx, ax
    34 00000014 6689D1                          mov cx, dx ; cx:bx = b*c
    35                                          
    36 00000017 66B80000                        mov ax, 0
    37 0000001B A0[00000000]                    mov al, [a]
    38                                          
    39 00000020 6683C064                        add ax, 100
    40                                          
    41 00000024 6699                            cwd ; dx:ax = 100+a
    42                                          
    43 00000026 6601D8                          add ax, bx
    44 00000029 6611CA                          adc dx, cx ; dx:ax = 100+a+b*c
    45                                          
    46 0000002C 66BB0000                        mov bx, 0
    47 00000030 8A1D[00000000]                  mov bl, [a]
    48 00000036 6683EB64                        sub bx, 100
    49                                          
    50 0000003A 66F7F3                          div bx ; ax = catul (100+a+b*c)/(a-100)
    51                                          
    52 0000003D 6689D8                          mov ax, bx
    53                                          
    54 00000040 6699                            cwd ; dx:ax = (100+a+b*c)/(a-100)
    55                                          
    56 00000042 660305[04000000]                add ax, word[e+0]
    57 00000049 661315[06000000]                adc dx, word[e+2] ; dx:ax = (100+a+b*c)/(a-100)+e
    58                                          
    59 00000050 6689C3                          mov bx, ax
    60 00000053 6689D1                          mov cx, dx ; cx:bx = (100+a+b*c)/(a-100)+e
    61                                          
    62 00000056 A0[00000000]                    mov al, [a]
    63 0000005B B400                            mov ah, 0
    64 0000005D 66A3[10000000]                  mov [auxx], ax ; auxx = a
    65                                          
    66 00000063 A1[08000000]                    mov eax, dword[x+0]
    67 00000068 8B15[0C000000]                  mov edx, dword[x+4]
    68                                          
    69 0000006E 66F735[10000000]                div word[auxx] ; eax = catul (x/a)
    70                                          
    71 00000075 6651                            push cx
    72 00000077 6653                            push bx
    73 00000079 5B                              pop ebx
    74                                          
    75 0000007A 01D8                            add eax, ebx
    76                                          
    77                                          ; exit(0)
    78 0000007C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    79 0000007E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
