     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 71041BC5                    r dd 11000101000110110000010001110001b
    16 00000004 D3AF752D                    t dd 00101101011101011010111111010011b
    17 00000008 00000000                    q dd 0
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          
    23                                          ;Se dau 2 dublucuvinte R si T. Sa se obtina dublucuvantul Q astfel: 
    24                                          ;bitii 0-6 din Q coincid cu bitii 10-16 a lui T
    25                                          ;bitii 7-24 din Q concid cu bitii obtinuti 7-24 in urma aplicarii R XOR T.
    26                                          ;bitii 25-31 din Q coincid cu bitii 5-11 a lui R.
    27                                          
    28                                          ; a
    29                                          
    30 00000000 8B1D[04000000]                  mov ebx, [t] ; ebx = t31 t30 .... t10 t9 t8  t7 t6 t5 t4  t3 t2 t1 t0
    31 00000006 C1CB0A                          ror ebx, 10 ; ebx = t9 t8 t7 t6  t5 t4 t3 t2  t1 t0 t31 t30 ... t16 t15 t14  t13 t12 t11 t10 
    32                                          
    33 00000009 89D8                            mov eax, ebx ; eax = t9 t8 t7 t6  t5 t4 t3 t2  t1 t0 t31 t30 ... t16 t15 t14  t13 t12 t11 t10 
    34 0000000B 83E07F                          and eax, 00000000000000000000000001111111b ; eax = 0000 0000 0000 0000 0000 0000 0 t16 t15 t14  t13 t12 t11 t10
    35                                          
    36                                          ; b
    37                                          
    38 0000000E 8B1D[00000000]                  mov ebx, [r]
    39 00000014 8B0D[04000000]                  mov ecx, [t]
    40 0000001A 31CB                            xor ebx, ecx ; ebx = xor intre r si t 
    41                                          
    42 0000001C 81E380FFFF01                    and ebx, 00000001111111111111111110000000b; ebx = 0000 000 tr24  tr23 tr22 tr21 tr20 ...  tr11 tr10 tr9 tr8  tr7 000 0000b
    43                                          
    44 00000022 09D8                            or eax, ebx ; eax = 0000 000 tr24  tr23 tr22 tr21 tr20 ...  tr11 tr10 tr9 tr8  tr7 t16 t15 t14  t13 t12 t11 t10
    45                                          
    46                                          ; c
    47                                          
    48 00000024 8B1D[00000000]                  mov ebx, [r] ; ebx = r31 r30 ... r11 r10 r9 r8  r7 r6 r5 r4  r3 r2 r1 r0
    49 0000002A C1C314                          rol ebx, 20 ; ebx = r11 r10 r9 r8  r7 r6 r5 r4  .... r15 r14 r13 r12
    50                                          
    51 0000002D 81E3000000FE                    and ebx, 11111110000000000000000000000000b; ebx = r11 r10 r9 r8  r7 r6 r5 0000 0000 0000 0000 0000 0000
    52                                          
    53 00000033 09D8                            or eax, ebx ; eax = r11 r10 r9 r8  r7 r6 r5 tr24  tr23 tr22 tr21 tr20 ...  tr11 tr10 tr9 tr8  tr7 t16 t15 t14  t13 t12 t11 t10
    54                                          
    55 00000035 A3[08000000]                    mov dword[q], eax 
    56                                          
    57                                          
    58                                  
    59                                          ; exit(0)
    60 0000003A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 0000003C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
