     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 616463646566                s1 db 'a', 'd', 'c', 'd', 'e', 'f'
    16                                      l1 equ $-s1
    17                                      
    18 00000006 3132333435                  s2 db '1', '2', '3', '4', '5'
    19                                      l2 equ $-s2
    20                                      
    21 0000000B 00<rept>                    d times (l1+l2) db 0 ; lungimea maxima pentru d, pentru ca nu cred ca pot folosi partea intreaga aici :-) 
    22                                      
    23                                      ; alternativ, as putea declara d in code segment, dar nu stiu daca e posibil
    24                                      
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          
    29                                          ;Se dau doua siruri de caractere S1 si S2. Sa se construiasca sirul D prin concatenarea elementelor de pe pozitiile impare din S2 cu elementele de pe pozitiile pare din S1
    30                                          ; S1: 'a', 'b', 'c', 'b', 'e', 'f'
    31                                          ; S2: '1', '2', '3', '4', '5'
    32                                          ; D: '1', '3', '5', 'b', 'b', 'f'
    33                                          
    34 00000000 BE00000000                      mov esi, 0
    35 00000005 BF00000000                      mov edi, 0
    36 0000000A B905000000                      mov ecx, l2 ; pregatim lucrul cu sirul s2
    37 0000000F B301                            mov bl, 1 ; un soi de contor, folosit pentru a determina paritatea pozitiei - il setam cu 1, deci il interpretam drept pozitie impara
    38                                          
    39 00000011 E31D                            jecxz sf1 ; trecem direct la celalalt sir, daca sirul actual e vid
    40                                          
    41                                          Rep1:
    42 00000013 80FB01                              cmp bl, 1 ; verificam daca ne aflam pe o pozitie impara in s2 
    43 00000016 7402                                je poz_imp_da 
    44 00000018 7511                                jne poz_imp_nu
    45                                              
    46                                              poz_imp_da:
    47 0000001A 8A86[06000000]                          mov al, [s2+esi] ; daca da, mutam termenul curent din s2 in al
    48 00000020 8887[0B000000]                          mov [d+edi], al ; apoi, din al il punem in pozitia curenta din d 
    49                                                  
    50 00000026 47                                      inc edi ; incrementam pozitia curenta (din d) 
    51 00000027 B300                                    mov bl, 0 ; am avut numar pe pozitie impara, deci urmeaza unul pe pozitie para
    52                                                  
    53 00000029 EB02                                    jmp ex1 
    54                                              
    55                                              poz_imp_nu:
    56 0000002B B301                                    mov bl, 1 ; am avut numar pe pozitie para, deci urmeaza unul pe pozitie impara
    57                                              
    58                                              ex1:
    59 0000002D 46                                      inc esi ; incrementam oricum pozitia curenta (din s2)
    60                                              
    61 0000002E E2E3                            loop Rep1 ; pana cand epuizam elementele din s2
    62                                          
    63                                          sf1:
    64                                          
    65 00000030 BE00000000                      mov esi, 0
    66 00000035 B906000000                      mov ecx, l1 ; pregatim lucrul cu sirul s1
    67 0000003A B301                            mov bl, 1 ; acelasi contor - il setam cu 1, deci il interpretam drept pozitie impara
    68                                          
    69 0000003C E31D                            jecxz final ; trecem la final, daca sirul actual e vid
    70                                          
    71                                          Rep2:
    72 0000003E 80FB00                              cmp bl, 0 ; verificam daca ne aflam pe o pozitie para in s1
    73 00000041 7402                                je poz_para_da 
    74 00000043 7511                                jne poz_para_nu
    75                                              
    76                                              poz_para_da:
    77 00000045 8A86[00000000]                          mov al, [s1+esi] ; daca da, mutam termenul curent din s1 in al
    78 0000004B 8887[0B000000]                          mov [d+edi], al ; apoi, din al il punem in pozitia curenta din d 
    79                                                  
    80 00000051 47                                      inc edi ; incrementam pozitia curenta (din d) 
    81 00000052 B301                                    mov bl, 1 ; am avut numar pe pozitie para, deci urmeaza unul pe pozitie impara
    82                                                  
    83 00000054 EB02                                    jmp ex2
    84                                              
    85                                              poz_para_nu:
    86 00000056 B300                                    mov bl, 0 ; am avut numar pe pozitie impara, deci urmeaza unul pe pozitie para
    87                                              
    88                                              ex2:
    89 00000058 46                                      inc esi ; incrementam oricum pozitia curenta (din s1)
    90                                              
    91 00000059 E2E3                            loop Rep2 ; pana cand epuizam elementele din s1
    92                                          
    93                                          
    94                                          final: ; gata:)
    95                                          
    96                                          ; exit(0)
    97 0000005B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    98 0000005D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
