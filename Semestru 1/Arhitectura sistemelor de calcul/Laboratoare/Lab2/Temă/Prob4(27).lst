     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 03                          b db 3
    16 00000001 07                          c db 7
    17 00000002 1D00                        e dw 29
    18 00000004 0D00                        f dw 13
    19 00000006 0600                        g dw 6
    20 00000008 0000                        auxx dw 0
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                             ; [(e+f-g)+(b+c)*3]/5
    26                                             
    27                                             ; (e+f-g)
    28                                             
    29 00000000 66A1[02000000]                     mov ax, [e]
    30 00000006 668B1D[04000000]                   mov bx, [f]
    31 0000000D 6601D8                             add ax, bx
    32 00000010 668B1D[06000000]                   mov bx, [g]
    33 00000017 6629D8                             sub ax, bx
    34                                             
    35                                             ; pregatesc inmultirea
    36                                             
    37 0000001A 66A3[08000000]                     mov [auxx], ax ; auxx = e+f-g
    38                                             
    39                                             ; (b+c)*3
    40                                             
    41 00000020 A0[00000000]                       mov al, [b]
    42 00000025 8A1D[01000000]                     mov bl, [c]
    43 0000002B 00D8                               add al, bl
    44 0000002D B303                               mov bl, 3
    45 0000002F F6E3                               mul bl ; ax = (b+c)*3
    46                                             
    47                                             ; [(e+f-g)+(b+c)*3]
    48                                             
    49 00000031 660305[08000000]                   add ax, [auxx]
    50                                             
    51                                             ; [(e+f-g)+(b+c)*3]/5
    52                                             
    53 00000038 66BA0000                           mov dx, 0
    54 0000003C B305                               mov bl, 5
    55 0000003E B700                               mov bh, 0
    56 00000040 66F7F3                             div bx
    57                                          
    58                                          ; exit(0)
    59 00000043 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 00000045 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
