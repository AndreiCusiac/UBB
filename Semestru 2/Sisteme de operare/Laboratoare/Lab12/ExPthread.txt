12
Scrieti un program C care primeste ca argumente la linia de comanda numere intregi. 
Programul va calcula un vector de frecventa pentru cifrele zecimale. 
Pentru fiecare argument, programul va crea un thread care numara aparitiile fiecarei cifre si adauga numarul la pozitia corespunzatoare din vectorul de frecventa. 
Folositi sincronizare eficienta.
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<pthread.h>
#include<string.h>

int f[9];
pthread_mutex_t mtx[9];
typedef struct{
  int nr;
  pthread_mutex_t* mtx;
}data;
void* nr(void* a){
  data d = *(data*)a;
  if(d.nr<10){
   return NULL;
}
  int n = d.nr/10;
  n%=10;
  printf("n = %d\n",n);
  if(n==0){
    pthread_mutex_lock(&d.mtx[n]);
    f[n]++;
    pthread_mutex_unlock(&d.mtx[n]);
  }
 if(n==1){
    pthread_mutex_lock(&d.mtx[n]);
    f[n]++;
    pthread_mutex_unlock(&d.mtx[n]);
  }
 if(n==2){
    pthread_mutex_lock(&d.mtx[n]);
    f[n]++;
    pthread_mutex_unlock(&d.mtx[n]);
  }
if(n==3){
    pthread_mutex_lock(&d.mtx[n]);
    f[n]++;
     pthread_mutex_unlock(&d.mtx[n]);
  }
if(n==4){
    pthread_mutex_lock(&d.mtx[n]);
    f[n]++;
     pthread_mutex_unlock(&d.mtx[n]);
  }
if(n==5){
    pthread_mutex_lock(&d.mtx[n]);
    f[n]++;
    pthread_mutex_unlock(&d.mtx[n]);
  }
if(n==6){
    pthread_mutex_lock(&d.mtx[n]);
    f[n]++;
    pthread_mutex_unlock(&d.mtx[n]);
  }
if(n==7){
    pthread_mutex_lock(&d.mtx[n]);
    f[n]++;
    pthread_mutex_unlock(&d.mtx[n]);
  }
if(n==8){
    pthread_mutex_lock(&d.mtx[n]);
    f[n]++;
    pthread_mutex_unlock(&d.mtx[n]);
  }
if(n==9){
   pthread_mutex_lock(&d.mtx[n]);
   f[n]++;
   pthread_mutex_unlock(&d.mtx[n]);
  }

return NULL;
}

int main(int argc,char** argv){
  if (argc==1){
    printf("Introduceti argumente!");
  exit(1);
 }
 pthread_t* t = malloc(sizeof(pthread_t)*argc);
 pthread_mutex_t* mtx = malloc(sizeof(pthread_mutex_t)*10);
 int i;
 data* a = malloc(sizeof(data)* argc);
 for(i=0;i<=9;i++){
 pthread_mutex_init(&mtx[i],NULL);
}
 for(i=0;i<argc;i++){
  a[i].nr = atoi(argv[i]);
  a[i].mtx = mtx;
  pthread_create(&t[i],NULL,nr,&a[i]);
 }

 for(i=0;i<argc;i++){
  pthread_join(t[i],NULL);
}
 for(i=0;i<=9;i++){
 pthread_mutex_destroy(&mtx[i]);
}

 for(i=0;i<=9;i++){
  printf("Frecventa nr %d este %d\n",i,f[i]);
}
   free(a);
   free(t);
   free(mtx);
return 0;
}



























14.
Scrieti un program C care converteste toate literele mici din argumentele primite la linia de comanda in litere mari si afiseaza rezultatul. 
Folositi un thread pentru fiecare argument.
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<pthread.h>
#include<string.h>

typedef struct{
  int id;
  char** elem;
}data;

void* f(void* a){
  data* d =(data*)a;
  int i;
  size_t size = strlen( d->elem[d->id]) ;
  for(i=0; i<size;i++)
    if(d->elem[d->id][i]>='a' && d->elem[d->id][i]<='z')
      d->elem[d->id][i]+='A'-'a';
  return NULL;
}

int main(int argc,char* argv[]){
 int i;
 char** s = malloc(sizeof(char*)*(argc-1));
 for(i=0;i<argc-1;i++){
   s[i] = malloc(sizeof(char)*(strlen(argv[i+1]+1)));
   strcpy(s[i],argv[i+1]);
  }
 pthread_t* t= malloc(sizeof(pthread_t)* (argc-1));
 data* datas = malloc(sizeof(data)* (argc-1));
 for(i=0;i<argc-1;i++){
   datas[i].id = i;
   datas[i].elem = s;
   pthread_create(&t[i],NULL,f,&datas[i]);
 }
 for(i=0;i<argc-1;i++)
   pthread_join(t[i],NULL);

 for(i=0;i<argc-1;i++)
   printf("%s ",s[i]);

 printf("\n");
 free(t);
 free(datas);
 for(i=0;i<argc-1;i++){
   free(s[i]);
 }
 free(s);
return 0;




























16
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<pthread.h>
#include<string.h>

typedef struct{
  pthread_mutex_t* mtx;
  pthread_barrier_t* bar;
  int M, nr;
}arg;

void* f(void* a){
  int n,i;
  arg ar =*((arg*)a);
  printf("Pthread ul %d asteapta\n",ar.nr);
  pthread_barrier_wait(ar.bar);
  for(i=0; i < ar.M; i++){
     pthread_mutex_lock(&ar.mtx[i]);
     n = (random()%101 +100)*1000;
     printf("Numar thread %d - Numar punct control %d \n",ar.nr,i);
     usleep(n);
     pthread_mutex_unlock(&ar.mtx[i]);
  }
  printf("Pthread ul %d a terminat\n",ar.nr);
  return NULL;
}

void destroy_mutexes(pthread_mutex_t *mutexes, int count) {
    int i;
    for (i = 0; i < count; i++) {
        pthread_mutex_destroy(&mutexes[i]);
    }
}

void wait_threads(pthread_t *T, int count) {
    int i;
    for (i = 0; i < count; i++) {
        pthread_join(T[i], NULL);
    }
}

int main(int argc,char* argv[]) {
  if(argc!=3){
     printf("Introduceti minim 2 argumente!\n");
     exit(1);
  }
  int N = atoi(argv[1]);
  int M = atoi(argv[2]);
  int i;
  arg* a= malloc(sizeof(arg)*N);
  pthread_t* t= malloc(sizeof(pthread_mutex_t) * N);
  pthread_mutex_t *mutex= malloc(sizeof(pthread_mutex_t) * M);
  pthread_barrier_t b;
  pthread_barrier_init(&b,NULL,N);
  for(i=0;i<M;i++){
    pthread_mutex_init(&mutex[i],NULL);
  }
  srandom(time(NULL));
 for(i=0;i<N;i++){
     a[i].nr = i;
     a[i].M = M;
     a[i].bar =&b;
     a[i].mtx = mutex;
     pthread_create(&t[i],NULL,f,&a[i]);
  }
    wait_threads(t,N);
    pthread_barrier_destroy(&b);
    destroy_mutexes(mutex, M);
    free(t);
    free(a);
    free(mutex);
return 0;
}




















17
#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <pthread.h>
#include <unistd.h>
typedef struct{
  int X,id;
  pthread_barrier_t* bar;
  sem_t* sem;
}arg;

void* f( void* a){
  arg ar = *((arg*)a);
  printf("Thread ul %d asteapta!\n",ar.id);
  pthread_barrier_wait(ar.bar);
  int i;
  printf("Thread ul %d a inceput!\n",ar.id);
  for(i=0;i<ar.X;i++){
     sem_wait(&ar.sem[i]);
     printf("Thread %d has entered checkpoint %d\n", ar.id, i);
     int n = (random() % 101 + 100);
     usleep(n * 1000);
     sem_post(&ar.sem[i]);
 }
  printf("Thread ul %d a TERMINAT!\n",ar.id);
  return NULL;
}

int main(int argc, char* argv[]){
  if(argc!=2){
     printf("Introduceti un argument!\n");
     exit(1);
  }
  int X= atoi(argv[1]),i,M=1,step=2;
  for(i=0;i<X;i++){
      M*=2;
  }
  pthread_barrier_t bar;
  pthread_t *t = malloc(sizeof(pthread_t) * M);
  arg* args  = malloc(sizeof(arg)*M);
  sem_t *sem = malloc(sizeof(sem_t)*X);
  for(i=0;i<X;i++){
    sem_init(&sem[i],0, M/step);
    step *= 2;
  }
 pthread_barrier_init(&bar,NULL,M);
 for(i=0;i<M;i++){
   args[i].id = i;
   args[i].bar =&bar;
   args[i].X=X;
   args[i].sem = sem;
   pthread_create(&t[i],NULL,f,&args[i]);
 }
 for(i=0;i<M;i++){
   pthread_join(t[i],NULL);
 }
 for(i=0;i<X;i++)
   sem_destroy(&sem[i]);
 pthread_barrier_destroy(&bar);
 free(args);
 free(sem);
 free(t);
return 0;
}






















8a;
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<pthread.h>
#include<string.h>

#define L 5
#define C 5
typedef struct{
 int id;
 int** m;
}data;
typedef struct{
 int suma;
}rez;
void* sum(void* a){
  int i;
  rez* r = malloc(sizeof(int));
  r->suma = 0;
  data* d = (data*)a;
  for(i=0;i<C;i++)
    r->suma += d->m[d->id][i];
  return r;
}

int main(int argc,char* argv[]){
 FILE* f;
 f= fopen(argv[1],"r");
 int** m = malloc(sizeof(int*)*L);
 int i,j;
 for(i=0;i<L;i++)
   m[i]=malloc(sizeof(int)*C);
 for(i=0;i<L;i++)
   for(j=0;j<C;j++)
    fscanf(f,"%d",&m[i][j]);
 pthread_t* t = malloc(sizeof(pthread_t)*L);
 data* a = malloc(sizeof(data)*L);
 for(i=0;i<L;i++){
   a[i].id = i;
   a[i].m = m;
   pthread_create(&t[i],NULL,sum,&a[i]);
 }
 void* suma;
 for(i=0;i<L;i++){
  pthread_join(t[i],&suma);
  rez r = *(rez*)suma;
  printf("suma linie %d  = %d\n",i,r.suma);
  free(suma);
 }
 free(a);
 free(t);
 for(i=0;i<L;i++)
    free(m[i]);
 free(m);
 fclose(f);
 return 0;
}

















Scrieti un program care primeste la linia de comanda siruri de caractere. 
Pentru fiecare sir de caractere programul creeaza un thread care calculeaza numarul de cifre, litere si caractere speciale (orice nu e litera sau cifra).
Programul principal asteapta ca thread-urile sa isi incheie executia si afiseaza rezultatele totale
 (numarul total de cifre, litere si caractere speciale din toate argumentele primite la linia de comanda) si apoi se incheie. 
Folositi sincronizare eficienta. 
Nu folositi variabile globale.
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<pthread.h>
#include<string.h>
typedef struct{
  int litere;
  int cifre;
  int special;
}rez;

typedef struct{
  char* string;
  int len;
}arg;

void* f(void* a){
  rez* r = (rez*)malloc(sizeof(rez));
  arg* ar = (arg*)a;
  int i;
  r->cifre = 0;
  r->litere = 0;
  r->special = 0;
  for(i=0;i<ar->len;i++){
    if(ar->string[i]>='0' && ar->string[i]<='9')
        r->cifre++;
    else if(ar->string[i]>='A' && ar->string[i]<='Z')
        r->litere++;
    else if(ar->string[i]>='a' && ar->string[i]<='z')
        r->litere++;
    else
       r->special++;
 }
  free(ar->string);
  free(ar);
  return r;
}

int main(int argc,char* argv[]) {
  if(argc==1){
     printf("Introduceti argumente!\n");
     exit(1);
  }
  int T = argc-1,i,l=0,c=0,s=0;
  void* r;
  pthread_t t[T];
  arg* a[T];
  for(i=0;i<T;i++){
     a[i] = (arg*)malloc(sizeof(arg));
     a[i]->len = strlen(argv[i+1]);
     char* x =(char*)malloc(sizeof(a[i]->len));
     strcpy(x,argv[i+1]);
     a[i]->string= x;
     pthread_create(&t[i],NULL,f,a[i]);
  }
 for(i=0;i<T;i++){
    pthread_join(t[i],&r);
    rez x = *(rez*)r;
    free(r);
    l += x.litere;
    c += x.cifre;
    s += x.special;
  }
 printf("Total litere :  %d\nTotal cifre : %d\nTotal caractere speciale :  %d\n",l,c,s);
return 0;
}




































16
Scrieti un program C care primeste ca argumente la linia de comanda 2 numere: N si M.
Programul va simula o cursa intre N thread-uri care trebuie sa treaca prin M puncte de control. 
Prin fiecare punct de control thread-urile trebuie sa treaca pe rand (nu se poate ca 2 thread-uri sa fie simultan in acelasi punct de control).
Fiecare thread care intra intr-un punct de control va astepta intre 100 si 200 de milisecunde (usleep(100000) face ca un thread sau proces sa astepte 100 de milisecunde) 
si va afisa un mesaj care va contine numarul thread-ului si numarul punctului de control, apoi va iesi din punctul de control. 
Fiecare thread va astepta pana cand toate thread-urile au fost create
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<pthread.h>
#include<string.h>

typedef struct{
  pthread_mutex_t* mtx;
  pthread_barrier_t* bar;
  int M, nr;
}arg;

void* f(void* a){
  int n,i;
  arg ar =*((arg*)a);
  printf("Pthread ul %d asteapta\n",ar.nr);
  pthread_barrier_wait(ar.bar);
  for(i=0; i < ar.M; i++){
     pthread_mutex_lock(&ar.mtx[i]);
     n = (random()%101 +100)*1000;
     printf("Numar thread %d - Numar punct control %d \n",ar.nr,i);
     usleep(n);
     pthread_mutex_unlock(&ar.mtx[i]);
  }
  printf("Pthread ul %d a terminat\n",ar.nr);
  return NULL;
}

void destroy_mutexes(pthread_mutex_t *mutexes, int count) {
    int i;
    for (i = 0; i < count; i++) {
        pthread_mutex_destroy(&mutexes[i]);
    }
}

void wait_threads(pthread_t *T, int count) {
    int i;
    for (i = 0; i < count; i++) {
        pthread_join(T[i], NULL);
    }
}

int main(int argc,char* argv[]) {
  if(argc!=3){
     printf("Introduceti minim 2 argumente!\n");
     exit(1);
  }
  int N = atoi(argv[1]);
  int M = atoi(argv[2]);
  int i;
  arg* a= malloc(sizeof(arg)*N);
  pthread_t* t= malloc(sizeof(pthread_mutex_t) * N);
  pthread_mutex_t *mutex= malloc(sizeof(pthread_mutex_t) * M);
  pthread_barrier_t b;
  pthread_barrier_init(&b,NULL,N);
  for(i=0;i<M;i++){
    pthread_mutex_init(&mutex[i],NULL);
  }
  srandom(time(NULL));
for(i=0;i<N;i++){
     a[i].nr = i;
     a[i].M = M;
     a[i].bar =&b;
     a[i].mtx = mutex;
     pthread_create(&t[i],NULL,f,&a[i]);
  }
    wait_threads(t,N);
    pthread_barrier_destroy(&b);
    destroy_mutexes(mutex, M);
    free(t);
    free(a);
    free(mutex);
return 0;
