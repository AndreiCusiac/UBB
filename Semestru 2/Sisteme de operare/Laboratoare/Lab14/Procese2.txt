--------------------> 1. Suma - Lab 8 <--------------------

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

//define a constant for the number of threads
#define THR_COUNT 100

#define ARR_SIZE 1000000

// This function will be executed by each thread

int global_sum = 0;

pthread_mutex_t mut;

typedef struct _segmen {

        int* array;
        int begin;
        int end;

}segmen;

void* thread_sum(void *param)
{

        segmen s = *(segmen*)param;

        int sum = 0;

        int i;

        //pthread_mutex_lock(&mut);

        for (i=s.begin; i < s.end; i++)
        {
                sum += s.array[i];
        }

        //pthread_mutex_unlock(&mut);

        pthread_mutex_lock(&mut);

        global_sum += sum;

        pthread_mutex_unlock(&mut);
        //printf("I am thread %lu, with value %d\n", (ulong)pthread_self(), n);

     return 0;
}

int main()
{
     int i = 0;

     pthread_t thr[THR_COUNT];

        int array[ARR_SIZE];

        for (i = 0; i < ARR_SIZE; i++)
        {
                array[i] = 1;
        }

        segmen s[THR_COUNT];

     // create threads

        pthread_mutex_init(&mut, NULL);

     for (i = 0; i < THR_COUNT; i++)
     {
         s[i].array = array;
         s[i].begin = i * ( ARR_SIZE / THR_COUNT);
         s[i].end = (i + 1) * ( ARR_SIZE / THR_COUNT);

         pthread_create(&thr[i], NULL, thread_sum, (void*)&s[i]);
     }

     // wait for termination

     for (i = 0; i < THR_COUNT; i++)
     {
         pthread_join(thr[i], NULL);
     }

        pthread_mutex_destroy(&mut);

        printf("Suma este: %d\n", global_sum);

     return 0;
}





--------------------> 2. Parametri si self - Lab 8 <--------------------

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

//define a constant for the number of threads

#define THR_COUNT 4

// This function will be executed by each thread

void* thread_function(void *param)
{

        int n = *(int*)param;

        printf("I am thread %lu, with value %d\n", (ulong)pthread_self(), n);

     return 0;
}

int main()
{
     int i = 0;

     pthread_t thr[THR_COUNT];

     int thr_param[THR_COUNT];

     // create threads

     for (i = 0; i < THR_COUNT; i++)
     {
         thr_param[i] = i;
         pthread_create(&thr[i], NULL, thread_function, (void*)&thr_param[i]);
     }

     // wait for termination

     for (i = 0; i < THR_COUNT; i++)
     {
         pthread_join(thr[i], NULL);
     }

     return 0;
}





--------------------> 3. Ex 1 - Lab 8 <--------------------

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <string.h>

int g_vocals = 0;
int g_cifre = 0;

#define PROCESE 5

pthread_mutex_t mut;

void* parcurge(void* param)
{
        char* cuv = (char*)param;

        int v_loc = 0;
        int n_loc = 0;

        int i=0;

        for (i = 0; i < strlen(cuv); i++)
        {
                if (cuv[i] >= '0' && cuv[i] <='9')
                {
                        n_loc++;
                }
                else if (cuv[i] == 'a' || cuv[i] == 'e' || cuv[i] == 'i' || cuv[i] == 'o' || cuv[i] == 'u')
                {
                        v_loc++;
                }
        }

        pthread_mutex_lock(&mut);

        g_vocals += v_loc;
        g_cifre += n_loc;

        pthread_mutex_unlock(&mut);

        return 0;
}

int main(int argc, char** argv)
{

        if (argc < PROCESE + 1)
        {
                printf("\nPrea putine argumente! (%d < %d)\n", argc-1, PROCESE);
                return 0;
        }
        else if (argc > PROCESE + 1)
        {
                printf("\nPrea multe argumente! (%d > %d)\n", argc-1, PROCESE);
                return 0;
        }

        int i=0;

        //char** param;

        pthread_t t[PROCESE];

        pthread_mutex_init(&mut, NULL);

        for (i=0; i<PROCESE; i++)
        {
                //strcpy(param[i], argv[i]);
                //pthread_create(&t[i], NULL, parcurge, (void*)&param[i]);

                pthread_create(&t[i], NULL, parcurge, (void*)argv[i+1]);
        }

        for (i=0; i<PROCESE; i++)
        {
                pthread_join(t[i], NULL);
        }

        pthread_mutex_destroy(&mut);

        printf("\nVocale citite: %d\n", g_vocals);
        printf("\nCifre citite: %d\n", g_cifre);


        return 0;
}






--------------------> 4. Ex 2 - Lab 8 <--------------------

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>

int N = 0;

pthread_mutex_t mut;

void* diviz (void* param)
{
        char* num = (char*)param;

        if (num == NULL)
                return 0;

        printf("Valoarea curenta este: %s\n", num);

        int OK=0;

        int n = atoi(num);

        if (n%2 ==0 || n%5 ==0)
        {
                OK=1;
        }

        pthread_mutex_lock(&mut);

        if (OK == 1)
                N += 1;

        pthread_mutex_unlock(&mut);

        return 0;
}

int main(int argc, char** argv)
{

        int i=0;

        pthread_t t[argc-1];

        pthread_mutex_init(&mut, NULL);

        for (i=0; i<argc; i++)
        {

                pthread_create(&t[i], NULL, diviz, (void*)argv[i+1]);
        }

        for (i=0; i<argc; i++)
        {
                pthread_join(t[i], NULL);
        }

        pthread_mutex_destroy(&mut);

        printf("Numarul de numere divizibile cu 2 sau cu 5 este: %d\n", N);

        return 0;
}
